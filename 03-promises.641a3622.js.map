{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAChCC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAyBzC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAM,CAAEF,WAAUC,SAClBE,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQL,GAERM,EAAON,E,GAERD,E,IAlCPR,EAAKiB,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOlB,EAAWmB,OAC9B,GAAInB,EAAWmB,MAAQ,GAAKlB,EAAUkB,MAAQ,GAAKjB,EAAYiB,OAAS,EAEtE,YADAC,EAAAzB,GAAS0B,OAAOC,QAAS,+BAG3B,IAAK,IAAIC,EAAI,EAAGA,GAAKrB,EAAYiB,MAAOI,GAAK,EAC3CpB,EAAcoB,EAAGN,GACdO,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBe,EAAAzB,GAAS0B,OAAOK,QAAQ,qBAAoCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAEnEuB,OAAM,SAAAH,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBe,EAAAzB,GAAS0B,OAAOC,QAAQ,oBAAmCK,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAGrEY,GAASC,OAAOjB,EAAUkB,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nlet delayValue = document.querySelector('input[name=\"delay\"]');\nlet stepValue = document.querySelector('input[name=\"step\"]');\nlet amountValue = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  let delay = Number(delayValue.value);\n  if (delayValue.value < 0 || stepValue.value < 0 || amountValue.value <= 0) {\n    Notiflix.Notify.failure(`Please enter correct value!`);\n    return;\n  }\n  for (let i = 1; i <= amountValue.value; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delay += Number(stepValue.value);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const obj = { position, delay };\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(obj);\n      } else {\n        reject(obj);\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayValue","$ce04d3a99e08e73b$var$stepValue","$ce04d3a99e08e73b$var$amountValue","$ce04d3a99e08e73b$var$createPromise","position","delay","obj","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.641a3622.js.map"}